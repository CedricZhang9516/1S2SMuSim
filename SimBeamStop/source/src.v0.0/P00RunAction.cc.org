//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// P00RunAction.cc
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "P00RunAction.hh"
#include "P00RunData.hh"
#include "P00Analysis.hh"

#include "G4Run.hh"
#include "G4RunManager.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........
P00RunAction::P00RunAction():G4UserRunAction()
{
  auto analysisManager = G4AnalysisManager::Instance();   
  analysisManager->SetVerboseLevel(0);
  analysisManager->SetNtupleMerging(true);

  analysisManager->CreateNtuple("P00RawData", "mu+ stopped primary data");   //First Ntuple, ID = 0
  analysisManager->CreateNtupleDColumn("XPosition");
  analysisManager->CreateNtupleDColumn("YPosition");
  analysisManager->CreateNtupleDColumn("ZPosition");
  analysisManager->FinishNtuple();

  analysisManager->CreateNtuple("P00BeamData", "mu+ beam information");        //Second Ntuple, ID = 1
  analysisManager->CreateNtupleDColumn("KinEnergy");    //column takes values of G4double type
  analysisManager->FinishNtuple();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........
P00RunAction::~P00RunAction()
{
  delete G4AnalysisManager::Instance();  
}




//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........
// Controlling of creating a run, beginning a run and end a run. 
G4Run* P00RunAction::GenerateRun() //Create a run
{
  return (new P00RunData);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........
void P00RunAction::BeginOfRunAction(const G4Run* run)
{
  // G4RunManager::GetRunManager()->SetRandomNumberStore(true);
  // G4RunManager::GetRunManager()->SetRandomNumberStoreDir("randomInfo/");
  // if (isMaster) G4Random::showEngineStatus();
  G4cout << "### Run " << run->GetRunID() << " start." << G4endl;
  auto analysisManager = G4AnalysisManager::Instance();
  analysisManager->OpenFile("P00RawData");
}


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........
void P00RunAction::EndOfRunAction(const G4Run*)   // print histogram statistics
{
  auto analysisManager = G4AnalysisManager::Instance();
  analysisManager->Write();
  analysisManager->CloseFile();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........
