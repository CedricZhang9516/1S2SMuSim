//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Geant4 Application
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "Geometry.hh"
#include "P00ActionInitialization.hh"

#include "G4RunManager.hh"
#include "G4UImanager.hh"
#include "G4VisExecutive.hh"
#include "G4UIExecutive.hh"
#include "FTFP_BERT.hh"
#include "Randomize.hh"

#include "G4UIcommand.hh"
#include <time.h>


int main( int argc, char** argv )
{
  // Seed random number according to time
  G4Random::setTheEngine(new CLHEP::RanluxEngine);   // Choose the Random engine
  std::srand ( time(NULL) );
  double seed=std::rand();
  G4Random::setTheSeed(seed,4);

  G4RunManager* runManager = new G4RunManager; // Construct default run manager
  auto geometry = new Geometry();
  auto physicsList = new FTFP_BERT;
  auto actionInitialization = new P00ActionInitialization();
  //Set up mandatory user initialization
  runManager->SetUserInitialization( geometry ); 
  runManager->SetUserInitialization( physicsList );
  runManager->SetUserInitialization( actionInitialization );
  runManager->Initialize(); // Initialize G4 kernel


  G4VisManager* visManager = new G4VisExecutive(); // Create visualization environment
  visManager->Initialize();
  G4UImanager* uiManager = G4UImanager::GetUIpointer();  // Get the pointer to the User Interface manager

  if ( argc != 1 ) {
    G4String command = "/control/execute ";
    uiManager->ApplyCommand(command+argv[1]);
  }
  else {   
  // interactive mode
    G4UIExecutive* uiExec = new G4UIExecutive(argc, argv);
    uiManager->ApplyCommand("/control/execute init_vis.mac");
    uiExec->SessionStart();
    delete uiExec;
  }


// Job termination
   delete visManager;
   delete runManager;
   return 0;
 }
